// DO NOT MODIFY!
// Generated by mb-ormapper generator ver 2.2
// https://github.com/tmurakam/mb-ormapper

#import "Database.h"
#import "DescLRU.h"

@interface DescLRU ()

- (void)_insert;
- (void)_update;
+ (NSString *)tableName;
- (void)_loadRow:(dbstmt *)stmt;
@end

@implementation DescLRU

- (instancetype)init
{
    self = [super init];
    return self;
}

/**
  @brief Migrate database table

  @return YES - table was newly created, NO - table already exists
*/

+ (BOOL)migrate
{
    NSArray *columnTypes = @[
        @"description", @"TEXT",
        @"lastUse", @"DATE",
        @"category", @"INTEGER",
        ];

    return [super migrate:columnTypes primaryKey:@"key"];
}

#pragma mark Read operations

/**
  @brief get the record matchs the id

  @param pid Primary key of the record
  @return record
*/
+ (nullable DescLRU *)find:(NSInteger)pid
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"SELECT * FROM DescLRUs WHERE key = ?;"];
    [stmt bindInt:0 val:pid];

    return [self find_first_stmt:stmt];
}

/**
  finder with description

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (nullable DescLRU*)find_by_description:(NSString*)key cond:(nullable NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE description = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE description = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindString:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (nullable DescLRU*)find_by_description:(NSString*)key
{
    return [self find_by_description:key cond:nil];
}

/**
  finder with lastUse

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (nullable DescLRU*)find_by_lastUse:(NSDate*)key cond:(nullable NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE lastUse = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE lastUse = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindDate:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (nullable DescLRU*)find_by_lastUse:(NSDate*)key
{
    return [self find_by_lastUse:key cond:nil];
}

/**
  finder with category

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (nullable DescLRU*)find_by_category:(NSInteger)key cond:(nullable NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE category = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE category = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindInt:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (nullable DescLRU*)find_by_category:(NSInteger)key
{
    return [self find_by_category:key cond:nil];
}


/**
  Get first record matches the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (nullable DescLRU *)find_first:(NSString *)cond
{
    if (cond == nil) {
        cond = @"LIMIT 1";
    } else {
        cond = [cond stringByAppendingString:@" LIMIT 1"];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_first_stmt:stmt];
}

/**
  Get all records match the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (nonnull NSMutableArray *)find_all:(NSString *)cond
{
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_all_stmt:stmt];
}

/**
  @brief create dbstmt

  @param s condition
  @return dbstmt
*/
+ (nonnull dbstmt *)gen_stmt:(nullable NSString *)cond
{
    NSString *sql;
    if (cond == nil) {
        sql = @"SELECT * FROM DescLRUs;";
    } else {
        sql = [NSString stringWithFormat:@"SELECT * FROM DescLRUs %@;", cond];
    }  
    dbstmt *stmt = [[Database instance] prepare:sql];
    return stmt;
}

/**
  Get first record matches the conditions

  @param stmt Statement
  @return array of records
*/
+ (nullable DescLRU *)find_first_stmt:(nonnull dbstmt *)stmt
{
    if ([stmt step] == SQLITE_ROW) {
        DescLRU *e = [[self class] new];
        [e _loadRow:stmt];
        return (DescLRU *)e;
    }
    return nil;
}

/**
  Get all records match the conditions

  @param stmt Statement
  @return array of records
*/
+ (nonnull NSMutableArray *)find_all_stmt:(nonnull dbstmt *)stmt
{
    NSMutableArray *array = [NSMutableArray new];

    while ([stmt step] == SQLITE_ROW) {
        DescLRU *e = [[self class] new];
        [e _loadRow:stmt];
        [array addObject:e];
    }
    return array;
}

- (void)_loadRow:(nonnull dbstmt *)stmt
{
    self.pid = [stmt colInt:0];
    self.desc = [stmt colString:1];
    self.lastUse = [stmt colDate:2];
    self.category = [stmt colInt:3];
}

#pragma mark Create operations

- (void)_insert
{
    [super _insert];

    Database *db = [Database instance];
    dbstmt *stmt;
    
    //[db beginTransaction];
    stmt = [db prepare:@"INSERT INTO DescLRUs VALUES(NULL,?,?,?);"];
    [stmt bindString:0 val:_desc];
    [stmt bindDate:1 val:_lastUse];
    [stmt bindInt:2 val:_category];
    [stmt step];

    self.pid = [db lastInsertRowId];

    //[db commitTransaction];

    [[Database instance] setModified];
}

#pragma mark Update operations

- (void)_update
{
    [super _update];

    Database *db = [Database instance];
    //[db beginTransaction];

    dbstmt *stmt = [db prepare:@"UPDATE DescLRUs SET "
        "description = ?"
        ",lastUse = ?"
        ",category = ?"
        " WHERE key = ?;"];
    [stmt bindString:0 val:_desc];
    [stmt bindDate:1 val:_lastUse];
    [stmt bindInt:2 val:_category];
    [stmt bindInt:3 val:self.pid];

    [stmt step];
    //[db commitTransaction];

    [[Database instance] setModified];
}

#pragma mark Delete operations

/**
  @brief Delete record
*/
- (void)delete
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"DELETE FROM DescLRUs WHERE key = ?;"];
    [stmt bindInt:0 val:self.pid];
    [stmt step];

    [[Database instance] setModified];
}

/**
  @brief Delete all records
*/
+ (void)delete_cond:(nullable NSString *)cond
{
    Database *db = [Database instance];

    if (cond == nil) {
        cond = @"";
    }
    NSString *sql = [NSString stringWithFormat:@"DELETE FROM DescLRUs %@;", cond];
    [db exec:sql];

    [[Database instance] setModified];
}

+ (void)delete_all
{
    [DescLRU delete_cond:nil];
}

/**
 * get table sql
 */
+ (void)getTableSql:(nonnull NSMutableString *)s
{
    [s appendString:@"DROP TABLE DescLRUs;\n"];
    [s appendString:@"CREATE TABLE DescLRUs (key INTEGER PRIMARY KEY"];

    [s appendFormat:@", description TEXT"];
    [s appendFormat:@", lastUse DATE"];
    [s appendFormat:@", category INTEGER"];
    
    [s appendString:@");\n"];

    NSMutableArray *ary = [self find_all:nil];
    for (DescLRU *e in ary) {
        [e getInsertSql:s];
        [s appendString:@"\n"];
    }
}

/**
 * get "INSERT" SQL
 */
- (void)getInsertSql:(nonnull NSMutableString *)s
{
    [s appendFormat:@"INSERT INTO DescLRUs VALUES(%ld", (long)self.pid];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:_desc]];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:[[Database instance] stringFromDate:_lastUse]]];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:[NSString stringWithFormat:@"%ld", (long)_category]]];
    [s appendString:@");"];
}

#pragma mark Internal functions

+ (NSString *)tableName
{
    return @"DescLRUs";
}

@end
